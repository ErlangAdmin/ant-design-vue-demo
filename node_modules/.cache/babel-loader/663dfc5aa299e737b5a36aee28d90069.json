{"remainingRequest":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\babel-loader\\lib\\index.js!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\components\\Login\\LoginItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\components\\Login\\LoginItem.vue","mtime":1688627473127},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688627699002},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\babel-loader\\lib\\index.js","mtime":1688627701159},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688627699002},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\vue-loader\\lib\\index.js","mtime":1688627669422}],"contextDependencies":[],"result":["import _mergeJSXProps from \"@vue/babel-helper-vue-jsx-merge-props\";\nimport \"ant-design-vue/es/button/style\";\nimport _Button from \"ant-design-vue/es/button\";\nimport _objectSpread from \"D:\\\\WORK\\\\github\\\\ant-design-vue\\\\geektime\\\\ant-design-vue-pro\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"ant-design-vue/es/input/style\";\nimport _Input from \"ant-design-vue/es/input\";\nimport \"ant-design-vue/es/col/style\";\nimport _Col from \"ant-design-vue/es/col\";\nimport \"ant-design-vue/es/row/style\";\nimport _Row from \"ant-design-vue/es/row\";\nimport _Object$keys from \"D:\\\\WORK\\\\github\\\\ant-design-vue\\\\geektime\\\\ant-design-vue-pro\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"ant-design-vue/es/icon/style\";\nimport _Icon from \"ant-design-vue/es/icon\";\nimport _objectWithoutProperties from \"D:\\\\WORK\\\\github\\\\ant-design-vue\\\\geektime\\\\ant-design-vue-pro\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _Promise from \"D:\\\\WORK\\\\github\\\\ant-design-vue\\\\geektime\\\\ant-design-vue-pro\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"ant-design-vue/es/form/style\";\nimport _Form from \"ant-design-vue/es/form\";\nimport omit from \"lodash/omit\";\nimport LoginContext from \"./LoginContext\";\nimport ItemMap from \"./map\";\nvar FormItem = _Form.Item;\nvar WrapFormItem = {\n  data: function data() {\n    return {\n      count: 0\n    };\n  },\n  props: {\n    onChange: Function,\n    defaultValue: String,\n    rules: Array,\n    updateActive: Function,\n    form: Object,\n    customprops: Object,\n    name: String,\n    placeholder: String,\n    type: String,\n    getCaptchaButtonText: {\n      type: String,\n      default: \"captcha\"\n    },\n    getCaptchaSecondText: {\n      type: String,\n      default: \"second\"\n    },\n    onGetCaptcha: Function,\n    countDown: Number\n  },\n  mounted: function mounted() {\n    var _this$$props = this.$props,\n        updateActive = _this$$props.updateActive,\n        name = _this$$props.name;\n\n    if (updateActive) {\n      updateActive(name);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    clearInterval(this.interval);\n  },\n  methods: {\n    getFormItemOptions: function getFormItemOptions(_ref) {\n      var onChange = _ref.onChange,\n          defaultValue = _ref.defaultValue,\n          customprops = _ref.customprops,\n          rules = _ref.rules;\n      var options = {\n        rules: rules || customprops.rules\n      };\n\n      if (onChange) {\n        options.onChange = onChange;\n      }\n\n      if (defaultValue) {\n        options.initialValue = defaultValue;\n      }\n\n      return options;\n    },\n    getCaptcha: function getCaptcha() {\n      var onGetCaptcha = this.$props.onGetCaptcha;\n      var result = onGetCaptcha ? onGetCaptcha() : null;\n\n      if (result === false) {\n        return;\n      }\n\n      if (result instanceof _Promise) {\n        result.then(this.runGetCaptchaCountDown);\n      } else {\n        this.runGetCaptchaCountDown();\n      }\n    },\n    runGetCaptchaCountDown: function runGetCaptchaCountDown() {\n      var _this = this;\n\n      var countDown = this.$props.countDown;\n      this.count = countDown || 59;\n      this.interval = setInterval(function () {\n        _this.count -= 1;\n\n        if (_this.count === 0) {\n          clearInterval(_this.interval);\n        }\n      }, 1000);\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    var count = this.$data.count; // 这么写是为了防止restProps中 带入 onChange, defaultValue, rules, updateActive props\n\n    var _this$$props2 = this.$props,\n        onChange = _this$$props2.onChange,\n        defaultValue = _this$$props2.defaultValue,\n        rules = _this$$props2.rules,\n        updateActive = _this$$props2.updateActive,\n        getFieldDecorator = _this$$props2.form.getFieldDecorator,\n        customprops = _this$$props2.customprops,\n        name = _this$$props2.name,\n        type = _this$$props2.type,\n        getCaptchaButtonText = _this$$props2.getCaptchaButtonText,\n        getCaptchaSecondText = _this$$props2.getCaptchaSecondText,\n        restProps = _objectWithoutProperties(_this$$props2, [\"onChange\", \"defaultValue\", \"rules\", \"updateActive\", \"form\", \"customprops\", \"name\", \"type\", \"getCaptchaButtonText\", \"getCaptchaSecondText\"]);\n\n    customprops.prefix = h(_Icon, {\n      \"attrs\": {\n        \"type\": customprops.prefixType\n      },\n      \"class\": \"prefixIcon\"\n    }); // get getFieldDecorator props\n\n    var options = this.getFormItemOptions(this.$props);\n    var otherProps = {};\n\n    _Object$keys(restProps).forEach(function (key) {\n      if (restProps[key]) otherProps[key] = restProps[key];\n    });\n\n    if (type === \"Captcha\") {\n      var inputProps = omit(otherProps, [\"onGetCaptcha\", \"countDown\"]);\n      return h(FormItem, [h(_Row, {\n        \"attrs\": {\n          \"gutter\": 8\n        }\n      }, [h(_Col, {\n        \"attrs\": {\n          \"span\": 16\n        }\n      }, [getFieldDecorator(name, options)(h(_Input, {\n        \"props\": _objectSpread({}, _objectSpread({}, customprops, inputProps))\n      }))]), h(_Col, {\n        \"attrs\": {\n          \"span\": 8\n        }\n      }, [h(_Button, {\n        \"attrs\": {\n          \"disabled\": !!count,\n          \"size\": \"large\"\n        },\n        \"class\": \"getCaptcha\",\n        \"on\": {\n          \"click\": this.getCaptcha\n        }\n      }, [count ? \"\".concat(count, \" \").concat(getCaptchaSecondText) : getCaptchaButtonText])])])]);\n    }\n\n    return h(FormItem, [getFieldDecorator(name, options)(h(_Input, {\n      \"props\": _objectSpread({}, _objectSpread({}, customprops, otherProps))\n    }))]);\n  }\n};\nvar LoginItem = {};\n\n_Object$keys(ItemMap).forEach(function (key) {\n  var item = ItemMap[key];\n  LoginItem[key] = {\n    props: {\n      onChange: Function,\n      defaultValue: String,\n      name: String,\n      placeholder: String,\n      rules: Array,\n      getCaptchaButtonText: String,\n      getCaptchaSecondText: String,\n      onGetCaptcha: Function,\n      countDown: Number\n    },\n    render: function render() {\n      var h = arguments[0];\n      var props = {\n        props: _objectSpread({}, this.$props)\n      };\n      return h(LoginContext.Consumer, [function (context) {\n        return h(WrapFormItem, _mergeJSXProps([{\n          \"attrs\": {\n            \"customprops\": item.props,\n            \"rules\": item.rules\n          }\n        }, props, {\n          \"attrs\": {\n            \"type\": key,\n            \"updateActive\": context.updateActive,\n            \"form\": context.form\n          }\n        }]));\n      }]);\n    }\n  };\n});\n\nexport default LoginItem;",{"version":3,"sources":["LoginItem.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport { Form, Input, Button, Row, Col, Icon } from \"ant-design-vue\";\r\nimport omit from \"lodash/omit\";\r\nimport LoginContext from \"./LoginContext\";\r\nimport ItemMap from \"./map\";\r\n\r\nconst FormItem = Form.Item;\r\n\r\nconst WrapFormItem = {\r\n  data() {\r\n    return {\r\n      count: 0\r\n    };\r\n  },\r\n  props: {\r\n    onChange: Function,\r\n    defaultValue: String,\r\n    rules: Array,\r\n    updateActive: Function,\r\n    form: Object,\r\n    customprops: Object,\r\n    name: String,\r\n    placeholder: String,\r\n    type: String,\r\n    getCaptchaButtonText: {\r\n      type: String,\r\n      default: \"captcha\"\r\n    },\r\n    getCaptchaSecondText: {\r\n      type: String,\r\n      default: \"second\"\r\n    },\r\n    onGetCaptcha: Function,\r\n    countDown: Number\r\n  },\r\n  mounted() {\r\n    const { updateActive, name } = this.$props;\r\n    if (updateActive) {\r\n      updateActive(name);\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.interval);\r\n  },\r\n  methods: {\r\n    getFormItemOptions({ onChange, defaultValue, customprops, rules }) {\r\n      const options = {\r\n        rules: rules || customprops.rules\r\n      };\r\n      if (onChange) {\r\n        options.onChange = onChange;\r\n      }\r\n      if (defaultValue) {\r\n        options.initialValue = defaultValue;\r\n      }\r\n      return options;\r\n    },\r\n    getCaptcha() {\r\n      const { onGetCaptcha } = this.$props;\r\n      const result = onGetCaptcha ? onGetCaptcha() : null;\r\n      if (result === false) {\r\n        return;\r\n      }\r\n      if (result instanceof Promise) {\r\n        result.then(this.runGetCaptchaCountDown);\r\n      } else {\r\n        this.runGetCaptchaCountDown();\r\n      }\r\n    },\r\n    runGetCaptchaCountDown() {\r\n      const { countDown } = this.$props;\r\n      this.count = countDown || 59;\r\n      this.interval = setInterval(() => {\r\n        this.count -= 1;\r\n        if (this.count === 0) {\r\n          clearInterval(this.interval);\r\n        }\r\n      }, 1000);\r\n    }\r\n  },\r\n  render() {\r\n    const { count } = this.$data;\r\n\r\n    // 这么写是为了防止restProps中 带入 onChange, defaultValue, rules, updateActive props\r\n    const {\r\n      // eslint-disable-next-line no-unused-vars\r\n      onChange,\r\n      // eslint-disable-next-line no-unused-vars\r\n      defaultValue,\r\n      // eslint-disable-next-line no-unused-vars\r\n      rules,\r\n      // eslint-disable-next-line no-unused-vars\r\n      updateActive,\r\n      form: { getFieldDecorator },\r\n      customprops,\r\n      name,\r\n      type,\r\n      getCaptchaButtonText,\r\n      getCaptchaSecondText,\r\n      ...restProps\r\n    } = this.$props;\r\n\r\n    customprops.prefix = (\r\n      <Icon type={customprops.prefixType} class=\"prefixIcon\" />\r\n    );\r\n\r\n    // get getFieldDecorator props\r\n    const options = this.getFormItemOptions(this.$props);\r\n\r\n    const otherProps = {};\r\n    Object.keys(restProps).forEach(key => {\r\n      if (restProps[key]) otherProps[key] = restProps[key];\r\n    });\r\n\r\n    if (type === \"Captcha\") {\r\n      const inputProps = omit(otherProps, [\"onGetCaptcha\", \"countDown\"]);\r\n      return (\r\n        <FormItem>\r\n          <Row gutter={8}>\r\n            <Col span={16}>\r\n              {getFieldDecorator(name, options)(\r\n                <Input {...{ props: { ...customprops, ...inputProps } }} />\r\n              )}\r\n            </Col>\r\n            <Col span={8}>\r\n              <Button\r\n                disabled={!!count}\r\n                class=\"getCaptcha\"\r\n                size=\"large\"\r\n                onClick={this.getCaptcha}\r\n              >\r\n                {count\r\n                  ? `${count} ${getCaptchaSecondText}`\r\n                  : getCaptchaButtonText}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </FormItem>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <FormItem>\r\n        {getFieldDecorator(name, options)(\r\n          <Input {...{ props: { ...customprops, ...otherProps } }} />\r\n        )}\r\n      </FormItem>\r\n    );\r\n  }\r\n};\r\n\r\nconst LoginItem = {};\r\nObject.keys(ItemMap).forEach(key => {\r\n  const item = ItemMap[key];\r\n  LoginItem[key] = {\r\n    props: {\r\n      onChange: Function,\r\n      defaultValue: String,\r\n      name: String,\r\n      placeholder: String,\r\n      rules: Array,\r\n      getCaptchaButtonText: String,\r\n      getCaptchaSecondText: String,\r\n      onGetCaptcha: Function,\r\n      countDown: Number\r\n    },\r\n    render() {\r\n      const props = { props: { ...this.$props } };\r\n      return (\r\n        <LoginContext.Consumer>\r\n          {context => (\r\n            <WrapFormItem\r\n              customprops={item.props}\r\n              rules={item.rules}\r\n              {...props}\r\n              type={key}\r\n              updateActive={context.updateActive}\r\n              form={context.form}\r\n            />\r\n          )}\r\n        </LoginContext.Consumer>\r\n      );\r\n    }\r\n  };\r\n});\r\n\r\nexport default LoginItem;\r\n</script>\r\n"],"sourceRoot":"src/components/Login"}]}