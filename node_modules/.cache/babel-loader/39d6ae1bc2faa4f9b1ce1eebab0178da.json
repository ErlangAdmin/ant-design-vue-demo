{"remainingRequest":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\thread-loader\\dist\\cjs.js!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\babel-loader\\lib\\index.js!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\store\\modules\\global.js","dependencies":[{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\store\\modules\\global.js","mtime":1688627473135},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688627699002},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1688627669854},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\babel-loader\\lib\\index.js","mtime":1688627701159},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\eslint-loader\\index.js","mtime":1688627692069}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\WORK\\\\github\\\\ant-design-vue\\\\geektime\\\\ant-design-vue-pro\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\WORK\\\\github\\\\ant-design-vue\\\\geektime\\\\ant-design-vue-pro\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport request from \"../../utils/request\";\nvar state = {\n  notices: [],\n  fetchingStatus: {\n    notice: false\n  },\n  notifyCount: 0,\n  unreadCount: 0\n};\nvar actions = {\n  fetchNotices: function () {\n    var _fetchNotices = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref) {\n      var commit, state, res, _res$data, data, unreadCount;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit, state = _ref.state;\n              commit(\"changeFetchStatus\", {\n                payload: {\n                  notice: true\n                }\n              });\n              _context.next = 4;\n              return request({\n                url: \"/api/notices\",\n                method: \"GET\"\n              });\n\n            case 4:\n              res = _context.sent;\n              _res$data = res.data, data = _res$data === void 0 ? [] : _res$data;\n              commit(\"saveNotices\", {\n                payload: data\n              });\n              unreadCount = state.notices.filter(function (item) {\n                return !item.read;\n              }).length;\n              commit(\"changeNotifyCount\", {\n                unreadCount: unreadCount,\n                notifyCount: data.length\n              });\n              commit(\"changeFetchStatus\", {\n                payload: {\n                  notice: false\n                }\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function fetchNotices(_x) {\n      return _fetchNotices.apply(this, arguments);\n    }\n\n    return fetchNotices;\n  }(),\n  clearNotices: function clearNotices(_ref2, payload) {\n    var commit = _ref2.commit,\n        state = _ref2.state;\n    commit(\"saveClearedNotices\", {\n      payload: payload\n    });\n    var count = state.notices.length;\n    var unreadCount = state.notices.filter(function (item) {\n      return !item.read;\n    }).length;\n    commit(\"changeNotifyCount\", {\n      unreadCount: unreadCount,\n      notifyCount: count\n    });\n  },\n  changeNoticeReadState: function changeNoticeReadState(_ref3, payload) {\n    var commit = _ref3.commit,\n        state = _ref3.state;\n    var notices = state.notices.map(function (item) {\n      var notice = _objectSpread({}, item);\n\n      if (notice.id === payload) {\n        notice.read = true;\n      }\n\n      return notice;\n    });\n    commit(\"saveNotices\", {\n      payload: notices\n    });\n    commit(\"changeNotifyCount\", {\n      notifyCount: notices.length,\n      unreadCount: notices.filter(function (item) {\n        return !item.read;\n      }).length\n    });\n  }\n};\nvar mutations = {\n  changeFetchStatus: function changeFetchStatus(state, _ref4) {\n    var payload = _ref4.payload;\n    state.fetchingStatus = _objectSpread({}, state.fetchingStatus, payload);\n  },\n  saveClearedNotices: function saveClearedNotices(state, _ref5) {\n    var payload = _ref5.payload;\n    state.notices = state.notices.filter(function (item) {\n      return item.type !== payload;\n    });\n  },\n  saveNotices: function saveNotices(state, _ref6) {\n    var payload = _ref6.payload;\n    state.notices = payload;\n  },\n  changeNotifyCount: function changeNotifyCount(state, _ref7) {\n    var notifyCount = _ref7.notifyCount,\n        unreadCount = _ref7.unreadCount;\n    state.notifyCount = notifyCount;\n    state.unreadCount = unreadCount;\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  actions: actions,\n  mutations: mutations\n};",{"version":3,"sources":["D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\store\\modules\\global.js"],"names":["request","state","notices","fetchingStatus","notice","notifyCount","unreadCount","actions","fetchNotices","commit","payload","url","method","res","data","filter","item","read","length","clearNotices","count","changeNoticeReadState","map","id","mutations","changeFetchStatus","saveClearedNotices","type","saveNotices","changeNotifyCount","namespaced"],"mappings":"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","sourcesContent":["import request from \"../../utils/request\";\r\n\r\nconst state = {\r\n  notices: [],\r\n  fetchingStatus: {\r\n    notice: false\r\n  },\r\n  notifyCount: 0,\r\n  unreadCount: 0\r\n};\r\n\r\nconst actions = {\r\n  async fetchNotices({ commit, state }) {\r\n    commit(\"changeFetchStatus\", { payload: { notice: true } });\r\n    const res = await request({\r\n      url: \"/api/notices\",\r\n      method: \"GET\"\r\n    });\r\n    const { data = [] } = res;\r\n    commit(\"saveNotices\", { payload: data });\r\n    const unreadCount = state.notices.filter(item => !item.read).length;\r\n    commit(\"changeNotifyCount\", { unreadCount, notifyCount: data.length });\r\n    commit(\"changeFetchStatus\", { payload: { notice: false } });\r\n  },\r\n  clearNotices({ commit, state }, payload) {\r\n    commit(\"saveClearedNotices\", { payload });\r\n    const count = state.notices.length;\r\n    const unreadCount = state.notices.filter(item => !item.read).length;\r\n    commit(\"changeNotifyCount\", { unreadCount, notifyCount: count });\r\n  },\r\n  changeNoticeReadState({ commit, state }, payload) {\r\n    const notices = state.notices.map(item => {\r\n      const notice = { ...item };\r\n      if (notice.id === payload) {\r\n        notice.read = true;\r\n      }\r\n      return notice;\r\n    });\r\n    commit(\"saveNotices\", { payload: notices });\r\n    commit(\"changeNotifyCount\", {\r\n      notifyCount: notices.length,\r\n      unreadCount: notices.filter(item => !item.read).length\r\n    });\r\n  }\r\n};\r\n\r\nconst mutations = {\r\n  changeFetchStatus(state, { payload }) {\r\n    state.fetchingStatus = {\r\n      ...state.fetchingStatus,\r\n      ...payload\r\n    };\r\n  },\r\n  saveClearedNotices(state, { payload }) {\r\n    state.notices = state.notices.filter(item => item.type !== payload);\r\n  },\r\n  saveNotices(state, { payload }) {\r\n    state.notices = payload;\r\n  },\r\n  changeNotifyCount(state, { notifyCount, unreadCount }) {\r\n    state.notifyCount = notifyCount;\r\n    state.unreadCount = unreadCount;\r\n  }\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  actions,\r\n  mutations\r\n};\r\n"]}]}