{"remainingRequest":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\components\\NoticeIcon\\NoticeIcon.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\components\\NoticeIcon\\NoticeIcon.vue","mtime":1688627473129},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688627699002},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\babel-loader\\lib\\index.js","mtime":1688627701159},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688627699002},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\vue-loader\\lib\\index.js","mtime":1688627669422}],"contextDependencies":[],"result":["\r\nimport HeaderDropdown from \"../HeaderDropdown\";\r\nimport NoticeList from \"./NoticeList\";\r\nimport PropTypes from \"ant-design-vue/lib/_util/vue-types\";\r\nimport {\r\n  getOptionProps,\r\n  filterEmpty\r\n} from \"ant-design-vue/lib/_util/props-util\";\r\nimport _map from \"lodash/map\";\r\n\r\nconst prefixCls = \"notice-icon\";\r\n\r\nexport default {\r\n  name: \"NoticeIcon\",\r\n  props: {\r\n    count: PropTypes.number.def(0),\r\n    className: PropTypes.string,\r\n    popupVisible: PropTypes.bool,\r\n    loading: PropTypes.bool,\r\n    clearText: PropTypes.string,\r\n    viewMoreText: PropTypes.string,\r\n    clearClose: PropTypes.bool.def(false)\r\n  },\r\n  data() {\r\n    return {\r\n      visible: false,\r\n      emptyImage:\r\n        \"https://gw.alipayobjects.com/zos/rmsportal/wAhyIChODzsoKIOBHcBk.svg\"\r\n    };\r\n  },\r\n  methods: {\r\n    handleVisibleChange(visible) {\r\n      this.visible = visible;\r\n    },\r\n    handleTabChange(tabType) {\r\n      this.$emit(\"tabChange\", tabType);\r\n    },\r\n    // eslint-disable-next-line\r\n    getNotificationBox(h) {\r\n      const { loading, clearText, viewMoreText } = this;\r\n      const children = filterEmpty(this.$slots.default);\r\n      if (!children) {\r\n        return null;\r\n      }\r\n      const panes = _map(children, child => {\r\n        const childProps = getOptionProps(child);\r\n        const {\r\n          list,\r\n          title,\r\n          count,\r\n          tabKey,\r\n          showClear,\r\n          emptyText,\r\n          showViewMore\r\n        } = childProps;\r\n        const len = list && list.length ? list.length : 0;\r\n        const msgCount = count || count === 0 ? count : len;\r\n        const tabTitle = msgCount > 0 ? `${title} (${msgCount})` : title;\r\n        const props = {\r\n          clearText,\r\n          emptyText,\r\n          viewMoreText,\r\n          showClear,\r\n          showViewMore,\r\n          title,\r\n          onClick: item => this.$emit(\"itemClick\", item, childProps),\r\n          onClear: () => this.$emit(\"clear\", title, tabKey),\r\n          onViewMore: event => this.$emit(\"viewMore\", childProps, event)\r\n        };\r\n        return (\r\n          <ATabPane tab={tabTitle} key={tabKey}>\r\n            <NoticeList data={list} {...{ props }} />\r\n          </ATabPane>\r\n        );\r\n      });\r\n      return (\r\n        <div>\r\n          <ASpin spinning={loading} delay={0}>\r\n            <ATabs class={`${prefixCls}__tabs`} onChange={this.handleTabChange}>\r\n              {panes}\r\n            </ATabs>\r\n          </ASpin>\r\n        </div>\r\n      );\r\n    }\r\n  },\r\n  render(h) {\r\n    const { className, count, visible, popupVisible } = this;\r\n    const noticeButtonClass = {\r\n      [className]: !!className,\r\n      opened: !!visible,\r\n      [`${prefixCls}__notice-button`]: true\r\n    };\r\n    const notificationBox = this.getNotificationBox(h);\r\n    const NoticeBellIcon = <a-icon type=\"bell\" class={`${prefixCls}__icon`} />;\r\n    const trigger = (\r\n      <span class={noticeButtonClass}>\r\n        <ABadge\r\n          count={count}\r\n          style={{ boxShadow: \"none\" }}\r\n          class={`${prefixCls}__badge`}\r\n        >\r\n          {NoticeBellIcon}\r\n        </ABadge>\r\n      </span>\r\n    );\r\n    if (!notificationBox) {\r\n      return trigger;\r\n    }\r\n    const popoverProps = {};\r\n    if (\"popupVisible\" in this) {\r\n      popoverProps.visible = popupVisible;\r\n    }\r\n    return (\r\n      <HeaderDropdown\r\n        placement=\"bottomRight\"\r\n        overlayClassName={`${prefixCls}__popover`}\r\n        trigger={[\"click\"]}\r\n        visible={visible}\r\n        onVisibleChange={this.handleVisibleChange}\r\n        overlay={notificationBox}\r\n        {...popoverProps}\r\n      >\r\n        {trigger}\r\n      </HeaderDropdown>\r\n    );\r\n  }\r\n};\r\n",{"version":3,"sources":["NoticeIcon.vue"],"names":[],"mappingsfile":"NoticeIcon.vue","sourceRoot":"src/components/NoticeIcon","sourcesContent":["<script>\r\nimport HeaderDropdown from \"../HeaderDropdown\";\r\nimport NoticeList from \"./NoticeList\";\r\nimport PropTypes from \"ant-design-vue/lib/_util/vue-types\";\r\nimport {\r\n  getOptionProps,\r\n  filterEmpty\r\n} from \"ant-design-vue/lib/_util/props-util\";\r\nimport _map from \"lodash/map\";\r\n\r\nconst prefixCls = \"notice-icon\";\r\n\r\nexport default {\r\n  name: \"NoticeIcon\",\r\n  props: {\r\n    count: PropTypes.number.def(0),\r\n    className: PropTypes.string,\r\n    popupVisible: PropTypes.bool,\r\n    loading: PropTypes.bool,\r\n    clearText: PropTypes.string,\r\n    viewMoreText: PropTypes.string,\r\n    clearClose: PropTypes.bool.def(false)\r\n  },\r\n  data() {\r\n    return {\r\n      visible: false,\r\n      emptyImage:\r\n        \"https://gw.alipayobjects.com/zos/rmsportal/wAhyIChODzsoKIOBHcBk.svg\"\r\n    };\r\n  },\r\n  methods: {\r\n    handleVisibleChange(visible) {\r\n      this.visible = visible;\r\n    },\r\n    handleTabChange(tabType) {\r\n      this.$emit(\"tabChange\", tabType);\r\n    },\r\n    // eslint-disable-next-line\r\n    getNotificationBox(h) {\r\n      const { loading, clearText, viewMoreText } = this;\r\n      const children = filterEmpty(this.$slots.default);\r\n      if (!children) {\r\n        return null;\r\n      }\r\n      const panes = _map(children, child => {\r\n        const childProps = getOptionProps(child);\r\n        const {\r\n          list,\r\n          title,\r\n          count,\r\n          tabKey,\r\n          showClear,\r\n          emptyText,\r\n          showViewMore\r\n        } = childProps;\r\n        const len = list && list.length ? list.length : 0;\r\n        const msgCount = count || count === 0 ? count : len;\r\n        const tabTitle = msgCount > 0 ? `${title} (${msgCount})` : title;\r\n        const props = {\r\n          clearText,\r\n          emptyText,\r\n          viewMoreText,\r\n          showClear,\r\n          showViewMore,\r\n          title,\r\n          onClick: item => this.$emit(\"itemClick\", item, childProps),\r\n          onClear: () => this.$emit(\"clear\", title, tabKey),\r\n          onViewMore: event => this.$emit(\"viewMore\", childProps, event)\r\n        };\r\n        return (\r\n          <ATabPane tab={tabTitle} key={tabKey}>\r\n            <NoticeList data={list} {...{ props }} />\r\n          </ATabPane>\r\n        );\r\n      });\r\n      return (\r\n        <div>\r\n          <ASpin spinning={loading} delay={0}>\r\n            <ATabs class={`${prefixCls}__tabs`} onChange={this.handleTabChange}>\r\n              {panes}\r\n            </ATabs>\r\n          </ASpin>\r\n        </div>\r\n      );\r\n    }\r\n  },\r\n  render(h) {\r\n    const { className, count, visible, popupVisible } = this;\r\n    const noticeButtonClass = {\r\n      [className]: !!className,\r\n      opened: !!visible,\r\n      [`${prefixCls}__notice-button`]: true\r\n    };\r\n    const notificationBox = this.getNotificationBox(h);\r\n    const NoticeBellIcon = <a-icon type=\"bell\" class={`${prefixCls}__icon`} />;\r\n    const trigger = (\r\n      <span class={noticeButtonClass}>\r\n        <ABadge\r\n          count={count}\r\n          style={{ boxShadow: \"none\" }}\r\n          class={`${prefixCls}__badge`}\r\n        >\r\n          {NoticeBellIcon}\r\n        </ABadge>\r\n      </span>\r\n    );\r\n    if (!notificationBox) {\r\n      return trigger;\r\n    }\r\n    const popoverProps = {};\r\n    if (\"popupVisible\" in this) {\r\n      popoverProps.visible = popupVisible;\r\n    }\r\n    return (\r\n      <HeaderDropdown\r\n        placement=\"bottomRight\"\r\n        overlayClassName={`${prefixCls}__popover`}\r\n        trigger={[\"click\"]}\r\n        visible={visible}\r\n        onVisibleChange={this.handleVisibleChange}\r\n        overlay={notificationBox}\r\n        {...popoverProps}\r\n      >\r\n        {trigger}\r\n      </HeaderDropdown>\r\n    );\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" src=\"./NoticeIcon.less\"></style>\r\n"]}]}