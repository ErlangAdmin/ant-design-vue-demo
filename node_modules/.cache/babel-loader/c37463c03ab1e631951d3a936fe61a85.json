{"remainingRequest":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\babel-loader\\lib\\index.js!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\utils\\bem.js","dependencies":[{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\utils\\bem.js","mtime":1688627473137},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688627699002},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\babel-loader\\lib\\index.js","mtime":1688627701159},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\eslint-loader\\index.js","mtime":1688627692069}],"contextDependencies":[],"result":["import _Object$keys from \"D:\\\\WORK\\\\github\\\\ant-design-vue\\\\geektime\\\\ant-design-vue-pro\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _Array$isArray from \"D:\\\\WORK\\\\github\\\\ant-design-vue\\\\geektime\\\\ant-design-vue-pro\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/array/is-array\";\n\n/**\r\n * bem helper\r\n * b() // \"button\"\r\n * b(\"text\") // \"button__text\"\r\n * b({ disabled }) // \"button button--disabled\"\r\n * b(\"text\", { disabled }) // \"button__text button__text--disabled\"\r\n * b([\"disabled\", \"primary\"]) // \"button button--disabled button--primary\"\r\n */\nvar ELEMENT = \"__\";\nvar MODS = \"_\";\n\nfunction join(name, el, symbol) {\n  return el ? name + symbol + el : name;\n}\n\nfunction prefix(name, mods) {\n  if (typeof mods === \"string\") {\n    return join(name, mods, MODS);\n  }\n\n  if (_Array$isArray(mods)) {\n    return mods.map(function (item) {\n      return prefix(name, item);\n    });\n  }\n\n  var ret = {};\n\n  if (mods) {\n    _Object$keys(mods).forEach(function (key) {\n      ret[name + MODS + key] = mods[key];\n    });\n  }\n\n  return ret;\n}\n\nexport function useBEM(name) {\n  return function (el, mods) {\n    if (el && typeof el !== \"string\") {\n      mods = el;\n      el = \"\";\n    }\n\n    el = join(name, el, ELEMENT);\n    return mods ? [el, prefix(el, mods)] : el;\n  };\n}",{"version":3,"sources":["D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\utils\\bem.js"],"names":["ELEMENT","MODS","join","name","el","symbol","prefix","mods","map","item","ret","forEach","key","useBEM"],"mappings":";;;;AAAA;;;;;;;;AASA,IAAMA,OAAO,GAAG,IAAhB;AACA,IAAMC,IAAI,GAAG,GAAb;;AAEA,SAASC,IAAT,CAAcC,IAAd,EAAoBC,EAApB,EAAwBC,MAAxB,EAAgC;AAC9B,SAAOD,EAAE,GAAGD,IAAI,GAAGE,MAAP,GAAgBD,EAAnB,GAAwBD,IAAjC;AACD;;AAED,SAASG,MAAT,CAAgBH,IAAhB,EAAsBI,IAAtB,EAA4B;AAC1B,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOL,IAAI,CAACC,IAAD,EAAOI,IAAP,EAAaN,IAAb,CAAX;AACD;;AAED,MAAI,eAAcM,IAAd,CAAJ,EAAyB;AACvB,WAAOA,IAAI,CAACC,GAAL,CAAS,UAAAC,IAAI;AAAA,aAAIH,MAAM,CAACH,IAAD,EAAOM,IAAP,CAAV;AAAA,KAAb,CAAP;AACD;;AAED,MAAMC,GAAG,GAAG,EAAZ;;AACA,MAAIH,IAAJ,EAAU;AACR,iBAAYA,IAAZ,EAAkBI,OAAlB,CAA0B,UAAAC,GAAG,EAAI;AAC/BF,MAAAA,GAAG,CAACP,IAAI,GAAGF,IAAP,GAAcW,GAAf,CAAH,GAAyBL,IAAI,CAACK,GAAD,CAA7B;AACD,KAFD;AAGD;;AAED,SAAOF,GAAP;AACD;;AAED,OAAO,SAASG,MAAT,CAAgBV,IAAhB,EAAsB;AAC3B,SAAO,UAASC,EAAT,EAAaG,IAAb,EAAmB;AACxB,QAAIH,EAAE,IAAI,OAAOA,EAAP,KAAc,QAAxB,EAAkC;AAChCG,MAAAA,IAAI,GAAGH,EAAP;AACAA,MAAAA,EAAE,GAAG,EAAL;AACD;;AACDA,IAAAA,EAAE,GAAGF,IAAI,CAACC,IAAD,EAAOC,EAAP,EAAWJ,OAAX,CAAT;AAEA,WAAOO,IAAI,GAAG,CAACH,EAAD,EAAKE,MAAM,CAACF,EAAD,EAAKG,IAAL,CAAX,CAAH,GAA4BH,EAAvC;AACD,GARD;AASD","sourcesContent":["/**\r\n * bem helper\r\n * b() // \"button\"\r\n * b(\"text\") // \"button__text\"\r\n * b({ disabled }) // \"button button--disabled\"\r\n * b(\"text\", { disabled }) // \"button__text button__text--disabled\"\r\n * b([\"disabled\", \"primary\"]) // \"button button--disabled button--primary\"\r\n */\r\n\r\nconst ELEMENT = \"__\";\r\nconst MODS = \"_\";\r\n\r\nfunction join(name, el, symbol) {\r\n  return el ? name + symbol + el : name;\r\n}\r\n\r\nfunction prefix(name, mods) {\r\n  if (typeof mods === \"string\") {\r\n    return join(name, mods, MODS);\r\n  }\r\n\r\n  if (Array.isArray(mods)) {\r\n    return mods.map(item => prefix(name, item));\r\n  }\r\n\r\n  const ret = {};\r\n  if (mods) {\r\n    Object.keys(mods).forEach(key => {\r\n      ret[name + MODS + key] = mods[key];\r\n    });\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nexport function useBEM(name) {\r\n  return function(el, mods) {\r\n    if (el && typeof el !== \"string\") {\r\n      mods = el;\r\n      el = \"\";\r\n    }\r\n    el = join(name, el, ELEMENT);\r\n\r\n    return mods ? [el, prefix(el, mods)] : el;\r\n  };\r\n}\r\n"]}]}