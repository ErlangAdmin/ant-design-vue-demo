{"remainingRequest":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\components\\GlobalHeader\\NoticeIconView.vue?vue&type=style&index=0&id=6072323f&scoped=true&lang=css&","dependencies":[{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\components\\GlobalHeader\\NoticeIconView.vue","mtime":1688627473124},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\css-loader\\index.js","mtime":1688627695373},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1688627669481},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\postcss-loader\\src\\index.js","mtime":1688627667655},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688627699002},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\vue-loader\\lib\\index.js","mtime":1688627669422}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.action {\r\n  display: inline-block;\r\n  height: 100%;\r\n  padding: 0 12px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n}\r\n",{"version":3,"sources":["NoticeIconView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NoticeIconView.vue","sourceRoot":"src/components/GlobalHeader","sourcesContent":["<template>\r\n  <notice-icon\r\n    class=\"action\"\r\n    :count=\"unreadCount\"\r\n    :loading=\"fetchingNotices\"\r\n    :clearText=\"$t('message')['component.noticeIcon.clear']\"\r\n    :viewMoreText=\"$t('message')['component.noticeIcon.view-more']\"\r\n    @itemClick=\"handleItemClick\"\r\n    @clear=\"handleNoticeClear\"\r\n    @viewMore=\"handleViewMore\"\r\n    clearClose\r\n  >\r\n    <notice-icon-tab\r\n      tabKey=\"notification\"\r\n      :count=\"unreadData.notification\"\r\n      :list=\"noticeData.notification\"\r\n      :title=\"$t('message')['component.globalHeader.notification']\"\r\n      :emptyText=\"$t('message')['component.globalHeader.notification.empty']\"\r\n      showViewMore\r\n    ></notice-icon-tab>\r\n    <notice-icon-tab\r\n      tabKey=\"message\"\r\n      :count=\"unreadData.message\"\r\n      :list=\"noticeData.message\"\r\n      :title=\"$t('message')['component.globalHeader.message']\"\r\n      :emptyText=\"$t('message')['component.globalHeader.message.empty']\"\r\n      showViewMore\r\n    ></notice-icon-tab>\r\n    <notice-icon-tab\r\n      tabKey=\"event\"\r\n      :count=\"unreadData.event\"\r\n      :list=\"noticeData.event\"\r\n      :title=\"$t('message')['component.globalHeader.event']\"\r\n      :emptyText=\"$t('message')['component.globalHeader.event.empty']\"\r\n      showViewMore\r\n    ></notice-icon-tab>\r\n  </notice-icon>\r\n</template>\r\n\r\n<script>\r\nimport NoticeIcon from \"@/components/NoticeIcon\";\r\nimport _groupBy from \"lodash/groupBy\";\r\nimport moment from \"moment\";\r\nimport { mapActions, mapState } from \"vuex\";\r\nexport default {\r\n  components: { NoticeIcon, NoticeIconTab: NoticeIcon.Tab },\r\n  // data(){\r\n  //   return {\r\n  //     fetchingNotices: true,\r\n  //   };\r\n  // },\r\n  computed: {\r\n    ...mapState(\"global\", {\r\n      notices: state => state.notices,\r\n      unreadCount: state => state.unreadCount,\r\n      fetchingNotices: state => state.fetchingStatus.notice\r\n    }),\r\n    noticeData() {\r\n      const { notices = [] } = this;\r\n      if (notices.length === 0) {\r\n        return {};\r\n      }\r\n      const newNotices = notices.map(notice => {\r\n        const newNotice = { ...notice };\r\n        if (newNotice.datetime) {\r\n          newNotice.datetime = moment(notice.datetime).fromNow();\r\n        }\r\n        if (newNotice.id) {\r\n          newNotice.key = newNotice.id;\r\n        }\r\n        return newNotice;\r\n      });\r\n      return _groupBy(newNotices, \"type\");\r\n    },\r\n    unreadData() {\r\n      const unreadMsg = {};\r\n      Object.entries(this.noticeData).forEach(([key, value]) => {\r\n        if (!unreadMsg[key]) {\r\n          unreadMsg[key] = 0;\r\n        }\r\n        if (Array.isArray(value)) {\r\n          unreadMsg[key] = value.filter(item => !item.read).length;\r\n        }\r\n      });\r\n      return unreadMsg;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchNotices();\r\n  },\r\n  methods: {\r\n    ...mapActions(\"global\", [\r\n      \"fetchNotices\",\r\n      \"changeNoticeReadState\",\r\n      \"clearNotices\"\r\n    ]),\r\n    handleItemClick(item) {\r\n      this.changeNoticeReadState(item.id);\r\n    },\r\n    handleNoticeClear(title, tabKey) {\r\n      this.$message.success(\r\n        `${this.$t(\"message\")[\"component.noticeIcon.cleared\"]} ${title}`\r\n      );\r\n      this.clearNotices(tabKey);\r\n    },\r\n    handleViewMore() {}\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.action {\r\n  display: inline-block;\r\n  height: 100%;\r\n  padding: 0 12px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n}\r\n</style>\r\n"]}]}