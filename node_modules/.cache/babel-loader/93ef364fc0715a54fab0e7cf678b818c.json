{"remainingRequest":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\babel-loader\\lib\\index.js!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\components\\GlobalHeader\\NoticeIconView.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\components\\GlobalHeader\\NoticeIconView.vue","mtime":1688627473124},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688627699002},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\babel-loader\\lib\\index.js","mtime":1688627701159},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688627699002},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\vue-loader\\lib\\index.js","mtime":1688627669422}],"contextDependencies":[],"result":["import _Array$isArray from \"D:\\\\WORK\\\\github\\\\ant-design-vue\\\\geektime\\\\ant-design-vue-pro\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/array/is-array\";\nimport _slicedToArray from \"D:\\\\WORK\\\\github\\\\ant-design-vue\\\\geektime\\\\ant-design-vue-pro\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries from \"D:\\\\WORK\\\\github\\\\ant-design-vue\\\\geektime\\\\ant-design-vue-pro\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/entries\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _objectSpread from \"D:\\\\WORK\\\\github\\\\ant-design-vue\\\\geektime\\\\ant-design-vue-pro\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport NoticeIcon from \"@/components/NoticeIcon\";\nimport _groupBy from \"lodash/groupBy\";\nimport moment from \"moment\";\nimport { mapActions, mapState } from \"vuex\";\nexport default {\n  components: {\n    NoticeIcon: NoticeIcon,\n    NoticeIconTab: NoticeIcon.Tab\n  },\n  // data(){\n  //   return {\n  //     fetchingNotices: true,\n  //   };\n  // },\n  computed: _objectSpread({}, mapState(\"global\", {\n    notices: function notices(state) {\n      return state.notices;\n    },\n    unreadCount: function unreadCount(state) {\n      return state.unreadCount;\n    },\n    fetchingNotices: function fetchingNotices(state) {\n      return state.fetchingStatus.notice;\n    }\n  }), {\n    noticeData: function noticeData() {\n      var _this$notices = this.notices,\n          notices = _this$notices === void 0 ? [] : _this$notices;\n\n      if (notices.length === 0) {\n        return {};\n      }\n\n      var newNotices = notices.map(function (notice) {\n        var newNotice = _objectSpread({}, notice);\n\n        if (newNotice.datetime) {\n          newNotice.datetime = moment(notice.datetime).fromNow();\n        }\n\n        if (newNotice.id) {\n          newNotice.key = newNotice.id;\n        }\n\n        return newNotice;\n      });\n      return _groupBy(newNotices, \"type\");\n    },\n    unreadData: function unreadData() {\n      var unreadMsg = {};\n\n      _Object$entries(this.noticeData).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        if (!unreadMsg[key]) {\n          unreadMsg[key] = 0;\n        }\n\n        if (_Array$isArray(value)) {\n          unreadMsg[key] = value.filter(function (item) {\n            return !item.read;\n          }).length;\n        }\n      });\n\n      return unreadMsg;\n    }\n  }),\n  mounted: function mounted() {\n    this.fetchNotices();\n  },\n  methods: _objectSpread({}, mapActions(\"global\", [\"fetchNotices\", \"changeNoticeReadState\", \"clearNotices\"]), {\n    handleItemClick: function handleItemClick(item) {\n      this.changeNoticeReadState(item.id);\n    },\n    handleNoticeClear: function handleNoticeClear(title, tabKey) {\n      this.$message.success(\"\".concat(this.$t(\"message\")[\"component.noticeIcon.cleared\"], \" \").concat(title));\n      this.clearNotices(tabKey);\n    },\n    handleViewMore: function handleViewMore() {}\n  })\n};",{"version":3,"sources":["NoticeIconView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,OAAA,UAAA,MAAA,yBAAA;AACA,OAAA,QAAA,MAAA,gBAAA;AACA,OAAA,MAAA,MAAA,QAAA;AACA,SAAA,UAAA,EAAA,QAAA,QAAA,MAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AAAA,IAAA,UAAA,EAAA,UAAA;AAAA,IAAA,aAAA,EAAA,UAAA,CAAA;AAAA,GADA;AAEA;AACA;AACA;AACA;AACA;AACA,EAAA,QAAA,oBACA,QAAA,CAAA,QAAA,EAAA;AACA,IAAA,OAAA,EAAA,iBAAA,KAAA;AAAA,aAAA,KAAA,CAAA,OAAA;AAAA,KADA;AAEA,IAAA,WAAA,EAAA,qBAAA,KAAA;AAAA,aAAA,KAAA,CAAA,WAAA;AAAA,KAFA;AAGA,IAAA,eAAA,EAAA,yBAAA,KAAA;AAAA,aAAA,KAAA,CAAA,cAAA,CAAA,MAAA;AAAA;AAHA,GAAA,CADA;AAMA,IAAA,UANA,wBAMA;AAAA,0BACA,IADA,CACA,OADA;AAAA,UACA,OADA,8BACA,EADA;;AAEA,UAAA,OAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,eAAA,EAAA;AACA;;AACA,UAAA,UAAA,GAAA,OAAA,CAAA,GAAA,CAAA,UAAA,MAAA,EAAA;AACA,YAAA,SAAA,qBAAA,MAAA,CAAA;;AACA,YAAA,SAAA,CAAA,QAAA,EAAA;AACA,UAAA,SAAA,CAAA,QAAA,GAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA,OAAA,EAAA;AACA;;AACA,YAAA,SAAA,CAAA,EAAA,EAAA;AACA,UAAA,SAAA,CAAA,GAAA,GAAA,SAAA,CAAA,EAAA;AACA;;AACA,eAAA,SAAA;AACA,OATA,CAAA;AAUA,aAAA,QAAA,CAAA,UAAA,EAAA,MAAA,CAAA;AACA,KAtBA;AAuBA,IAAA,UAvBA,wBAuBA;AACA,UAAA,SAAA,GAAA,EAAA;;AACA,sBAAA,KAAA,UAAA,EAAA,OAAA,CAAA,gBAAA;AAAA;AAAA,YAAA,GAAA;AAAA,YAAA,KAAA;;AACA,YAAA,CAAA,SAAA,CAAA,GAAA,CAAA,EAAA;AACA,UAAA,SAAA,CAAA,GAAA,CAAA,GAAA,CAAA;AACA;;AACA,YAAA,eAAA,KAAA,CAAA,EAAA;AACA,UAAA,SAAA,CAAA,GAAA,CAAA,GAAA,KAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,mBAAA,CAAA,IAAA,CAAA,IAAA;AAAA,WAAA,EAAA,MAAA;AACA;AACA,OAPA;;AAQA,aAAA,SAAA;AACA;AAlCA,IAPA;AA2CA,EAAA,OA3CA,qBA2CA;AACA,SAAA,YAAA;AACA,GA7CA;AA8CA,EAAA,OAAA,oBACA,UAAA,CAAA,QAAA,EAAA,CACA,cADA,EAEA,uBAFA,EAGA,cAHA,CAAA,CADA;AAMA,IAAA,eANA,2BAMA,IANA,EAMA;AACA,WAAA,qBAAA,CAAA,IAAA,CAAA,EAAA;AACA,KARA;AASA,IAAA,iBATA,6BASA,KATA,EASA,MATA,EASA;AACA,WAAA,QAAA,CAAA,OAAA,WACA,KAAA,EAAA,CAAA,SAAA,EAAA,8BAAA,CADA,cACA,KADA;AAGA,WAAA,YAAA,CAAA,MAAA;AACA,KAdA;AAeA,IAAA,cAfA,4BAeA,CAAA;AAfA;AA9CA,CAAA","sourcesContent":["<template>\r\n  <notice-icon\r\n    class=\"action\"\r\n    :count=\"unreadCount\"\r\n    :loading=\"fetchingNotices\"\r\n    :clearText=\"$t('message')['component.noticeIcon.clear']\"\r\n    :viewMoreText=\"$t('message')['component.noticeIcon.view-more']\"\r\n    @itemClick=\"handleItemClick\"\r\n    @clear=\"handleNoticeClear\"\r\n    @viewMore=\"handleViewMore\"\r\n    clearClose\r\n  >\r\n    <notice-icon-tab\r\n      tabKey=\"notification\"\r\n      :count=\"unreadData.notification\"\r\n      :list=\"noticeData.notification\"\r\n      :title=\"$t('message')['component.globalHeader.notification']\"\r\n      :emptyText=\"$t('message')['component.globalHeader.notification.empty']\"\r\n      showViewMore\r\n    ></notice-icon-tab>\r\n    <notice-icon-tab\r\n      tabKey=\"message\"\r\n      :count=\"unreadData.message\"\r\n      :list=\"noticeData.message\"\r\n      :title=\"$t('message')['component.globalHeader.message']\"\r\n      :emptyText=\"$t('message')['component.globalHeader.message.empty']\"\r\n      showViewMore\r\n    ></notice-icon-tab>\r\n    <notice-icon-tab\r\n      tabKey=\"event\"\r\n      :count=\"unreadData.event\"\r\n      :list=\"noticeData.event\"\r\n      :title=\"$t('message')['component.globalHeader.event']\"\r\n      :emptyText=\"$t('message')['component.globalHeader.event.empty']\"\r\n      showViewMore\r\n    ></notice-icon-tab>\r\n  </notice-icon>\r\n</template>\r\n\r\n<script>\r\nimport NoticeIcon from \"@/components/NoticeIcon\";\r\nimport _groupBy from \"lodash/groupBy\";\r\nimport moment from \"moment\";\r\nimport { mapActions, mapState } from \"vuex\";\r\nexport default {\r\n  components: { NoticeIcon, NoticeIconTab: NoticeIcon.Tab },\r\n  // data(){\r\n  //   return {\r\n  //     fetchingNotices: true,\r\n  //   };\r\n  // },\r\n  computed: {\r\n    ...mapState(\"global\", {\r\n      notices: state => state.notices,\r\n      unreadCount: state => state.unreadCount,\r\n      fetchingNotices: state => state.fetchingStatus.notice\r\n    }),\r\n    noticeData() {\r\n      const { notices = [] } = this;\r\n      if (notices.length === 0) {\r\n        return {};\r\n      }\r\n      const newNotices = notices.map(notice => {\r\n        const newNotice = { ...notice };\r\n        if (newNotice.datetime) {\r\n          newNotice.datetime = moment(notice.datetime).fromNow();\r\n        }\r\n        if (newNotice.id) {\r\n          newNotice.key = newNotice.id;\r\n        }\r\n        return newNotice;\r\n      });\r\n      return _groupBy(newNotices, \"type\");\r\n    },\r\n    unreadData() {\r\n      const unreadMsg = {};\r\n      Object.entries(this.noticeData).forEach(([key, value]) => {\r\n        if (!unreadMsg[key]) {\r\n          unreadMsg[key] = 0;\r\n        }\r\n        if (Array.isArray(value)) {\r\n          unreadMsg[key] = value.filter(item => !item.read).length;\r\n        }\r\n      });\r\n      return unreadMsg;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchNotices();\r\n  },\r\n  methods: {\r\n    ...mapActions(\"global\", [\r\n      \"fetchNotices\",\r\n      \"changeNoticeReadState\",\r\n      \"clearNotices\"\r\n    ]),\r\n    handleItemClick(item) {\r\n      this.changeNoticeReadState(item.id);\r\n    },\r\n    handleNoticeClear(title, tabKey) {\r\n      this.$message.success(\r\n        `${this.$t(\"message\")[\"component.noticeIcon.cleared\"]} ${title}`\r\n      );\r\n      this.clearNotices(tabKey);\r\n    },\r\n    handleViewMore() {}\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.action {\r\n  display: inline-block;\r\n  height: 100%;\r\n  padding: 0 12px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/GlobalHeader"}]}