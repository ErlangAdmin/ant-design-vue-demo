{"remainingRequest":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\components\\NoticeIcon\\NoticeList.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\components\\NoticeIcon\\NoticeList.vue","mtime":1688627473130},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688627699002},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1688627669854},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\babel-loader\\lib\\index.js","mtime":1688627701159},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688627699002},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\vue-loader\\lib\\index.js","mtime":1688627669422}],"contextDependencies":[],"result":["\r\nimport PropTypes from \"ant-design-vue/lib/_util/vue-types\";\r\n\r\nconst prefixCls = \"notice-list\";\r\nconst genCls = moduleName => `${prefixCls}__${moduleName}`;\r\n\r\nexport default {\r\n  name: \"NoticeList\",\r\n  // functional: true,\r\n  props: {\r\n    count: PropTypes.number,\r\n    list: PropTypes.array,\r\n    data: PropTypes.array.def([]),\r\n    title: PropTypes.string,\r\n    tabKey: PropTypes.string,\r\n    showClear: PropTypes.bool.def(true),\r\n    showViewMore: PropTypes.bool.def(false),\r\n    emptyText: PropTypes.string,\r\n    clearText: PropTypes.string,\r\n    viewMoreText: PropTypes.string,\r\n    onViewMore: PropTypes.func.def(() => null),\r\n    onClick: PropTypes.func.def(() => null),\r\n    onClear: PropTypes.func.def(() => null)\r\n  },\r\n  // eslint-disable-next-line\r\n  render(h) {\r\n    const {\r\n      title,\r\n      data,\r\n      emptyText,\r\n      clearText,\r\n      showClear,\r\n      showViewMore,\r\n      viewMoreText,\r\n      onClick,\r\n      onClear,\r\n      onViewMore\r\n    } = this;\r\n    if (data.length === 0) {\r\n      return (\r\n        <div class={genCls(\"not-found\")}>\r\n          <img\r\n            src=\"https://gw.alipayobjects.com/zos/rmsportal/sAuJeJzSKbUmHfBQRzmZ.svg\"\r\n            alt=\"not found\"\r\n          />\r\n          <div>{emptyText}</div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <AList\r\n          class={genCls(\"list\")}\r\n          dataSource={data}\r\n          renderItem={(item, i) => {\r\n            const itemCls = {\r\n              [genCls(\"list-item\")]: true,\r\n              [genCls(\"list-read\")]: !!item.read\r\n            };\r\n            const leftIcon = item.avatar ? (\r\n              typeof item.avatar === \"string\" ? (\r\n                <AAvatar\r\n                  class={genCls(\"list-item__avatar\")}\r\n                  src={item.avatar}\r\n                />\r\n              ) : (\r\n                <span class={genCls(\"list-item__icon-element\")}>\r\n                  {item.avatar}\r\n                </span>\r\n              )\r\n            ) : (\r\n              \"\"\r\n            );\r\n            let extra = item.extra;\r\n            if (item.extra && item.status) {\r\n              const color = {\r\n                todo: \"\",\r\n                processing: \"blue\",\r\n                urgent: \"red\",\r\n                doing: \"gold\"\r\n              }[item.status];\r\n              extra = item.extra ? (\r\n                typeof item.extra === \"string\" ? (\r\n                  <ATag color={color} style={{ marginRight: 0 }}>\r\n                    {item.extra}\r\n                  </ATag>\r\n                ) : (\r\n                  item.extra\r\n                )\r\n              ) : (\r\n                \"\"\r\n              );\r\n            }\r\n            return (\r\n              <AListItem\r\n                class={itemCls}\r\n                key={item.key || i}\r\n                onClick={() => onClick && onClick(item)}\r\n              >\r\n                <AListItemMeta\r\n                  class={genCls(\"list-item__meta\")}\r\n                  avatar={leftIcon}\r\n                  title={\r\n                    <div class={genCls(\"list-item__title\")}>\r\n                      {item.title}\r\n                      <div class={genCls(\"list-item__extra\")}>{extra}</div>\r\n                    </div>\r\n                  }\r\n                  description={\r\n                    <div>\r\n                      <div class={genCls(\"list-item__description\")}>\r\n                        {item.description}\r\n                      </div>\r\n                      <div class={genCls(\"list-item__datetime\")}>\r\n                        {item.datetime}\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                />\r\n              </AListItem>\r\n            );\r\n          }}\r\n        />\r\n        <div class={genCls(\"bottom-bar\")}>\r\n          {showClear ? (\r\n            <div onClick={onClear}>\r\n              {clearText} {title}\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {showViewMore ? (\r\n            <div onClick={e => onViewMore && onViewMore(e)}>{viewMoreText}</div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n",{"version":3,"sources":["NoticeList.vue"],"names":[],"mappingsfile":"NoticeList.vue","sourceRoot":"src/components/NoticeIcon","sourcesContent":["<script>\r\nimport PropTypes from \"ant-design-vue/lib/_util/vue-types\";\r\n\r\nconst prefixCls = \"notice-list\";\r\nconst genCls = moduleName => `${prefixCls}__${moduleName}`;\r\n\r\nexport default {\r\n  name: \"NoticeList\",\r\n  // functional: true,\r\n  props: {\r\n    count: PropTypes.number,\r\n    list: PropTypes.array,\r\n    data: PropTypes.array.def([]),\r\n    title: PropTypes.string,\r\n    tabKey: PropTypes.string,\r\n    showClear: PropTypes.bool.def(true),\r\n    showViewMore: PropTypes.bool.def(false),\r\n    emptyText: PropTypes.string,\r\n    clearText: PropTypes.string,\r\n    viewMoreText: PropTypes.string,\r\n    onViewMore: PropTypes.func.def(() => null),\r\n    onClick: PropTypes.func.def(() => null),\r\n    onClear: PropTypes.func.def(() => null)\r\n  },\r\n  // eslint-disable-next-line\r\n  render(h) {\r\n    const {\r\n      title,\r\n      data,\r\n      emptyText,\r\n      clearText,\r\n      showClear,\r\n      showViewMore,\r\n      viewMoreText,\r\n      onClick,\r\n      onClear,\r\n      onViewMore\r\n    } = this;\r\n    if (data.length === 0) {\r\n      return (\r\n        <div class={genCls(\"not-found\")}>\r\n          <img\r\n            src=\"https://gw.alipayobjects.com/zos/rmsportal/sAuJeJzSKbUmHfBQRzmZ.svg\"\r\n            alt=\"not found\"\r\n          />\r\n          <div>{emptyText}</div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <AList\r\n          class={genCls(\"list\")}\r\n          dataSource={data}\r\n          renderItem={(item, i) => {\r\n            const itemCls = {\r\n              [genCls(\"list-item\")]: true,\r\n              [genCls(\"list-read\")]: !!item.read\r\n            };\r\n            const leftIcon = item.avatar ? (\r\n              typeof item.avatar === \"string\" ? (\r\n                <AAvatar\r\n                  class={genCls(\"list-item__avatar\")}\r\n                  src={item.avatar}\r\n                />\r\n              ) : (\r\n                <span class={genCls(\"list-item__icon-element\")}>\r\n                  {item.avatar}\r\n                </span>\r\n              )\r\n            ) : (\r\n              \"\"\r\n            );\r\n            let extra = item.extra;\r\n            if (item.extra && item.status) {\r\n              const color = {\r\n                todo: \"\",\r\n                processing: \"blue\",\r\n                urgent: \"red\",\r\n                doing: \"gold\"\r\n              }[item.status];\r\n              extra = item.extra ? (\r\n                typeof item.extra === \"string\" ? (\r\n                  <ATag color={color} style={{ marginRight: 0 }}>\r\n                    {item.extra}\r\n                  </ATag>\r\n                ) : (\r\n                  item.extra\r\n                )\r\n              ) : (\r\n                \"\"\r\n              );\r\n            }\r\n            return (\r\n              <AListItem\r\n                class={itemCls}\r\n                key={item.key || i}\r\n                onClick={() => onClick && onClick(item)}\r\n              >\r\n                <AListItemMeta\r\n                  class={genCls(\"list-item__meta\")}\r\n                  avatar={leftIcon}\r\n                  title={\r\n                    <div class={genCls(\"list-item__title\")}>\r\n                      {item.title}\r\n                      <div class={genCls(\"list-item__extra\")}>{extra}</div>\r\n                    </div>\r\n                  }\r\n                  description={\r\n                    <div>\r\n                      <div class={genCls(\"list-item__description\")}>\r\n                        {item.description}\r\n                      </div>\r\n                      <div class={genCls(\"list-item__datetime\")}>\r\n                        {item.datetime}\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                />\r\n              </AListItem>\r\n            );\r\n          }}\r\n        />\r\n        <div class={genCls(\"bottom-bar\")}>\r\n          {showClear ? (\r\n            <div onClick={onClear}>\r\n              {clearText} {title}\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {showViewMore ? (\r\n            <div onClick={e => onViewMore && onViewMore(e)}>{viewMoreText}</div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" src=\"./NoticeList.less\"></style>\r\n"]}]}