{"remainingRequest":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\components\\Login\\LoginItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\src\\components\\Login\\LoginItem.vue","mtime":1688627473127},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688627699002},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\babel-loader\\lib\\index.js","mtime":1688627701159},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688627699002},{"path":"D:\\WORK\\github\\ant-design-vue\\geektime\\ant-design-vue-pro\\node_modules\\vue-loader\\lib\\index.js","mtime":1688627669422}],"contextDependencies":[],"result":["\r\nimport { Form, Input, Button, Row, Col, Icon } from \"ant-design-vue\";\r\nimport omit from \"lodash/omit\";\r\nimport LoginContext from \"./LoginContext\";\r\nimport ItemMap from \"./map\";\r\n\r\nconst FormItem = Form.Item;\r\n\r\nconst WrapFormItem = {\r\n  data() {\r\n    return {\r\n      count: 0\r\n    };\r\n  },\r\n  props: {\r\n    onChange: Function,\r\n    defaultValue: String,\r\n    rules: Array,\r\n    updateActive: Function,\r\n    form: Object,\r\n    customprops: Object,\r\n    name: String,\r\n    placeholder: String,\r\n    type: String,\r\n    getCaptchaButtonText: {\r\n      type: String,\r\n      default: \"captcha\"\r\n    },\r\n    getCaptchaSecondText: {\r\n      type: String,\r\n      default: \"second\"\r\n    },\r\n    onGetCaptcha: Function,\r\n    countDown: Number\r\n  },\r\n  mounted() {\r\n    const { updateActive, name } = this.$props;\r\n    if (updateActive) {\r\n      updateActive(name);\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.interval);\r\n  },\r\n  methods: {\r\n    getFormItemOptions({ onChange, defaultValue, customprops, rules }) {\r\n      const options = {\r\n        rules: rules || customprops.rules\r\n      };\r\n      if (onChange) {\r\n        options.onChange = onChange;\r\n      }\r\n      if (defaultValue) {\r\n        options.initialValue = defaultValue;\r\n      }\r\n      return options;\r\n    },\r\n    getCaptcha() {\r\n      const { onGetCaptcha } = this.$props;\r\n      const result = onGetCaptcha ? onGetCaptcha() : null;\r\n      if (result === false) {\r\n        return;\r\n      }\r\n      if (result instanceof Promise) {\r\n        result.then(this.runGetCaptchaCountDown);\r\n      } else {\r\n        this.runGetCaptchaCountDown();\r\n      }\r\n    },\r\n    runGetCaptchaCountDown() {\r\n      const { countDown } = this.$props;\r\n      this.count = countDown || 59;\r\n      this.interval = setInterval(() => {\r\n        this.count -= 1;\r\n        if (this.count === 0) {\r\n          clearInterval(this.interval);\r\n        }\r\n      }, 1000);\r\n    }\r\n  },\r\n  render() {\r\n    const { count } = this.$data;\r\n\r\n    // 这么写是为了防止restProps中 带入 onChange, defaultValue, rules, updateActive props\r\n    const {\r\n      // eslint-disable-next-line no-unused-vars\r\n      onChange,\r\n      // eslint-disable-next-line no-unused-vars\r\n      defaultValue,\r\n      // eslint-disable-next-line no-unused-vars\r\n      rules,\r\n      // eslint-disable-next-line no-unused-vars\r\n      updateActive,\r\n      form: { getFieldDecorator },\r\n      customprops,\r\n      name,\r\n      type,\r\n      getCaptchaButtonText,\r\n      getCaptchaSecondText,\r\n      ...restProps\r\n    } = this.$props;\r\n\r\n    customprops.prefix = (\r\n      <Icon type={customprops.prefixType} class=\"prefixIcon\" />\r\n    );\r\n\r\n    // get getFieldDecorator props\r\n    const options = this.getFormItemOptions(this.$props);\r\n\r\n    const otherProps = {};\r\n    Object.keys(restProps).forEach(key => {\r\n      if (restProps[key]) otherProps[key] = restProps[key];\r\n    });\r\n\r\n    if (type === \"Captcha\") {\r\n      const inputProps = omit(otherProps, [\"onGetCaptcha\", \"countDown\"]);\r\n      return (\r\n        <FormItem>\r\n          <Row gutter={8}>\r\n            <Col span={16}>\r\n              {getFieldDecorator(name, options)(\r\n                <Input {...{ props: { ...customprops, ...inputProps } }} />\r\n              )}\r\n            </Col>\r\n            <Col span={8}>\r\n              <Button\r\n                disabled={!!count}\r\n                class=\"getCaptcha\"\r\n                size=\"large\"\r\n                onClick={this.getCaptcha}\r\n              >\r\n                {count\r\n                  ? `${count} ${getCaptchaSecondText}`\r\n                  : getCaptchaButtonText}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </FormItem>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <FormItem>\r\n        {getFieldDecorator(name, options)(\r\n          <Input {...{ props: { ...customprops, ...otherProps } }} />\r\n        )}\r\n      </FormItem>\r\n    );\r\n  }\r\n};\r\n\r\nconst LoginItem = {};\r\nObject.keys(ItemMap).forEach(key => {\r\n  const item = ItemMap[key];\r\n  LoginItem[key] = {\r\n    props: {\r\n      onChange: Function,\r\n      defaultValue: String,\r\n      name: String,\r\n      placeholder: String,\r\n      rules: Array,\r\n      getCaptchaButtonText: String,\r\n      getCaptchaSecondText: String,\r\n      onGetCaptcha: Function,\r\n      countDown: Number\r\n    },\r\n    render() {\r\n      const props = { props: { ...this.$props } };\r\n      return (\r\n        <LoginContext.Consumer>\r\n          {context => (\r\n            <WrapFormItem\r\n              customprops={item.props}\r\n              rules={item.rules}\r\n              {...props}\r\n              type={key}\r\n              updateActive={context.updateActive}\r\n              form={context.form}\r\n            />\r\n          )}\r\n        </LoginContext.Consumer>\r\n      );\r\n    }\r\n  };\r\n});\r\n\r\nexport default LoginItem;\r\n",{"version":3,"sources":["LoginItem.vue"],"names":[],"mappingsfile":"LoginItem.vue","sourceRoot":"src/components/Login","sourcesContent":["<script>\r\nimport { Form, Input, Button, Row, Col, Icon } from \"ant-design-vue\";\r\nimport omit from \"lodash/omit\";\r\nimport LoginContext from \"./LoginContext\";\r\nimport ItemMap from \"./map\";\r\n\r\nconst FormItem = Form.Item;\r\n\r\nconst WrapFormItem = {\r\n  data() {\r\n    return {\r\n      count: 0\r\n    };\r\n  },\r\n  props: {\r\n    onChange: Function,\r\n    defaultValue: String,\r\n    rules: Array,\r\n    updateActive: Function,\r\n    form: Object,\r\n    customprops: Object,\r\n    name: String,\r\n    placeholder: String,\r\n    type: String,\r\n    getCaptchaButtonText: {\r\n      type: String,\r\n      default: \"captcha\"\r\n    },\r\n    getCaptchaSecondText: {\r\n      type: String,\r\n      default: \"second\"\r\n    },\r\n    onGetCaptcha: Function,\r\n    countDown: Number\r\n  },\r\n  mounted() {\r\n    const { updateActive, name } = this.$props;\r\n    if (updateActive) {\r\n      updateActive(name);\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.interval);\r\n  },\r\n  methods: {\r\n    getFormItemOptions({ onChange, defaultValue, customprops, rules }) {\r\n      const options = {\r\n        rules: rules || customprops.rules\r\n      };\r\n      if (onChange) {\r\n        options.onChange = onChange;\r\n      }\r\n      if (defaultValue) {\r\n        options.initialValue = defaultValue;\r\n      }\r\n      return options;\r\n    },\r\n    getCaptcha() {\r\n      const { onGetCaptcha } = this.$props;\r\n      const result = onGetCaptcha ? onGetCaptcha() : null;\r\n      if (result === false) {\r\n        return;\r\n      }\r\n      if (result instanceof Promise) {\r\n        result.then(this.runGetCaptchaCountDown);\r\n      } else {\r\n        this.runGetCaptchaCountDown();\r\n      }\r\n    },\r\n    runGetCaptchaCountDown() {\r\n      const { countDown } = this.$props;\r\n      this.count = countDown || 59;\r\n      this.interval = setInterval(() => {\r\n        this.count -= 1;\r\n        if (this.count === 0) {\r\n          clearInterval(this.interval);\r\n        }\r\n      }, 1000);\r\n    }\r\n  },\r\n  render() {\r\n    const { count } = this.$data;\r\n\r\n    // 这么写是为了防止restProps中 带入 onChange, defaultValue, rules, updateActive props\r\n    const {\r\n      // eslint-disable-next-line no-unused-vars\r\n      onChange,\r\n      // eslint-disable-next-line no-unused-vars\r\n      defaultValue,\r\n      // eslint-disable-next-line no-unused-vars\r\n      rules,\r\n      // eslint-disable-next-line no-unused-vars\r\n      updateActive,\r\n      form: { getFieldDecorator },\r\n      customprops,\r\n      name,\r\n      type,\r\n      getCaptchaButtonText,\r\n      getCaptchaSecondText,\r\n      ...restProps\r\n    } = this.$props;\r\n\r\n    customprops.prefix = (\r\n      <Icon type={customprops.prefixType} class=\"prefixIcon\" />\r\n    );\r\n\r\n    // get getFieldDecorator props\r\n    const options = this.getFormItemOptions(this.$props);\r\n\r\n    const otherProps = {};\r\n    Object.keys(restProps).forEach(key => {\r\n      if (restProps[key]) otherProps[key] = restProps[key];\r\n    });\r\n\r\n    if (type === \"Captcha\") {\r\n      const inputProps = omit(otherProps, [\"onGetCaptcha\", \"countDown\"]);\r\n      return (\r\n        <FormItem>\r\n          <Row gutter={8}>\r\n            <Col span={16}>\r\n              {getFieldDecorator(name, options)(\r\n                <Input {...{ props: { ...customprops, ...inputProps } }} />\r\n              )}\r\n            </Col>\r\n            <Col span={8}>\r\n              <Button\r\n                disabled={!!count}\r\n                class=\"getCaptcha\"\r\n                size=\"large\"\r\n                onClick={this.getCaptcha}\r\n              >\r\n                {count\r\n                  ? `${count} ${getCaptchaSecondText}`\r\n                  : getCaptchaButtonText}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </FormItem>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <FormItem>\r\n        {getFieldDecorator(name, options)(\r\n          <Input {...{ props: { ...customprops, ...otherProps } }} />\r\n        )}\r\n      </FormItem>\r\n    );\r\n  }\r\n};\r\n\r\nconst LoginItem = {};\r\nObject.keys(ItemMap).forEach(key => {\r\n  const item = ItemMap[key];\r\n  LoginItem[key] = {\r\n    props: {\r\n      onChange: Function,\r\n      defaultValue: String,\r\n      name: String,\r\n      placeholder: String,\r\n      rules: Array,\r\n      getCaptchaButtonText: String,\r\n      getCaptchaSecondText: String,\r\n      onGetCaptcha: Function,\r\n      countDown: Number\r\n    },\r\n    render() {\r\n      const props = { props: { ...this.$props } };\r\n      return (\r\n        <LoginContext.Consumer>\r\n          {context => (\r\n            <WrapFormItem\r\n              customprops={item.props}\r\n              rules={item.rules}\r\n              {...props}\r\n              type={key}\r\n              updateActive={context.updateActive}\r\n              form={context.form}\r\n            />\r\n          )}\r\n        </LoginContext.Consumer>\r\n      );\r\n    }\r\n  };\r\n});\r\n\r\nexport default LoginItem;\r\n</script>\r\n"]}]}